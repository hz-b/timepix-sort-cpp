diff --git a/mmap_allocator.h b/mmap_allocator.h
index d3cc9d5..719887d 100644
--- a/mmap_allocator.h
+++ b/mmap_allocator.h
@@ -14,7 +14,7 @@ namespace mmap_allocator_namespace
 	template <typename T, typename A>
         class mmappable_vector;
 
-	template <typename T> 
+	template <typename T>
 	class mmap_allocator: public std::allocator<T>
 	{
 public:
@@ -25,8 +25,8 @@ public:
 
 		template<typename _Tp1>
 	        struct rebind
-        	{ 
-			typedef mmap_allocator<_Tp1> other; 
+        	{
+		    typedef mmap_allocator<_Tp1> other;
 		};
 
 		pointer allocate(size_type n, const void *hint=0)
@@ -36,7 +36,8 @@ public:
 				fprintf(stderr, "Alloc %zd bytes.\n", n*sizeof(T));
 			}
 			if (access_mode == DEFAULT_STL_ALLOCATOR) {
-				return std::allocator<T>::allocate(n, hint);
+				return std::allocator<T>::allocate(n);
+				//return std::allocator<T>::allocate(n, hint);
 			} else {
 				if (n == 0) {
 					return NULL;
@@ -52,7 +53,7 @@ public:
 				if (get_verbosity() > 0) {
 					fprintf(stderr, "pointer = %p\n", the_pointer);
 				}
-				
+
 				return (pointer)the_pointer;
 			}
 		}
@@ -78,7 +79,7 @@ public:
 			}
 		}
 
-		mmap_allocator() throw(): 
+		mmap_allocator() throw():
 			std::allocator<T>(),
 			filename(""),
 			offset(0),
@@ -125,7 +126,7 @@ public:
 			keep_forever((flags & KEEP_FOREVER) != 0)
 		{
 		}
-			
+
 		~mmap_allocator() throw() { }
 
 private:
