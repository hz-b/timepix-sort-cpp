name: build and test on ubuntu

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: true
      matrix:
        build_type: [Release]
        cpp_compiler: [g++]
        c_compiler: [gcc]

    steps:
    - name: install required extra packages
      uses: awalsh128/cache-apt-pkgs-action@latest
      with:
          packages: libboost-test-dev libboost-program-options-dev patch
    - name: checkout test data repository
      uses: actions/checkout@v4
      with:
          repository: hz-b/timepix-sort-data
          path: timepix-sort-data

    - name: checkout repository
      uses: actions/checkout@v4
      with:
        # need the memory map
        submodules: 'true'

    - name: apply patch to mmap allocator
      #
      run: (cd external_repositories/mmap_allocator/ && patch -p1 < ../../mmap_allocator.patch)

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        TPX3_TEST_DATA=`pwd`/timepix-sort-data/data/Co_pos_0000.tpx3
        echo "tpx3-test-data=$TPX3_TEST_DATA" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: |
        export TPX3_TEST_DATA=${{ steps.strings.outputs.tpx3-test-data }}
        echo "using test data $TPX3_TEST_DATA"
        ctest --build-config ${{ matrix.build_type }}
